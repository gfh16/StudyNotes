/*******************************************************************************

                             C++ 中随机数

    1. C++中没有类似 random() 的函数，必须 srand(unsigned int seed) 和 rand()一起使用
    2.

*******************************************************************************/
/*
0. 随机数
  (1) 什么是随机数？为什么要使用随机数？
     <1> 随机数都是由随机数生成器生成的
     <2> 随机数可以用于生成数据加密秘钥、产生随机样品等。 对某些产品的加密与解密
     <3> 随机数是介于 0 到 RAND_MAX 之间的一个数。同一台机器， RAND_MAX 是固定的

  (2) 计算机的随机数如何产生？
     (1) 计算机的伪随机数是由随机种子根据一定的计算方法(算法)计算出来的值。
         因此，只要计算方法固定，随机种子固定，那么产生的随机数就是固定的
     (2) 默认的随机种子来自于系统时钟

1. 随机数 与 伪随机数
  (1) 伪随机数，是指不是真正的"随机", 是有规律的
  (2) 计算机的随机种子来自于系统时钟。
  (3) 计算机只能产生伪随机数而不能产生绝对随机的随机数
  (4) 真正的随机数是使用物理现象产生的：如掷硬币、骰子、使用电子元件的噪音、核裂变等；
      而计算机随机数是按照一定的算法模拟产生的，是伪随机数
  (5) 真随机数的重要性在于，完全没有规律性。故一般企业对产品的加密秘钥的生层必须采用真随机数，
      以防被破解


2. 随机数种子
  (1) 随机数是由随机种子产生的， 这样的一个“随机种子”是一个无符号整型数
  (2) 通常使用系统当前的时间作为随机数种子：srand((unsigned)time(NULL))

3. srand() 与 rand()
   (1) srand() 用于设定随机数种子
   (2) rand() 用于产生随机数

4. 产生一定范围内的随机数。 两种方法：
   (1) s = rand()%(Y-X+1)+X    // 产生 X-Y之间的随机数
   (2) s = 1 + int (100.0*rand()/(RAND_MAX+1.0))   // 产生100以内的随机数
                                                   // 注意：100.0,1.0的小数点不能少！
   (3) 两种方法的比较：
       <1> 前一种方法时间性能好。但如果随机数的范围比较大，可能出现随机数不够随机的的情况
       <2> 后一种方法理论上更随机一些

5. 一些有用链接
    https://blog.csdn.net/SweeNeil/article/details/83071722


*/

////////////////////////////////////////////////////////////////////////////////
#if 0

#include<iostream>
#include<ctime>
#include<cstdlib>

using namespace std;

int main()
{
  int i , j;

  //设置种子
  srand((unsigned)time(NULL));

  /*生成10个随机数*/
  for(int i=0;  i<10; i++)
  {
    //生成实际的随机数
    j = rand();
    cout<<"随机数是："<< j << endl;
  }

  return 0;
}

#endif
////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////
#if 0

#include<iostream>
#include<ctime>
#include<cstdlib>

using namespace std;

int main()
{
  int i , j;

  //设置种子
  srand((unsigned)time(NULL));

  /*生成10个随机数*/
  for(int i=0;  i<10; i++)
  {
    //生成实际的随机数
    j = rand();
    cout<<"随机数是："<< j << endl;
  }

  return 0;
}

#endif
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
/// 只使用rand()，每次程序运行产生的随机数序列都是一样的
#if 0

#include<iostream>
using namespace std;

int main()
{
  //srand(3);
  for(int i=0; i<5; i++)
  {
    cout<< rand() << "," << endl;
  }

  return 0;
}

/// 说明： 对于同一个机器，每个随机数种子对应的随机数序列是固定的。如果想要保证不同的时候运行程序
///       产生不一样的随机数，必须保证种子是随机的
///       使用time(0)做种子，让种子随着时间变化，就能保证每次产生的随机数列都不一样

#endif
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/// 产生 N 以内的随机数列
/// 比如：产生4以内的随机数，rand()%4. 但仅限于比较小的范围
/// rand()产生的随机数是 0 到 RAND_MAX 之间的数， RAND_MAX是一个很大的数，根据系统不同而不同
/// 要产生从 X 到 Y 的随机数，使用式子： s = rand()%(X-Y+1)+Y


#if 1

#include<iostream>
using namespace std;

int main()
{
  int k;
  srand((unsigned)time(NULL));
  for(int i=0; i<10; i++)
  {
    // k =1+int(10.0*rand()/(RAND_MAX+1.0));
    k = rand()%10 + 1;
    cout<< k << endl;
  }

  return 0;
}

#endif

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////

#if 0

#include<stdio.h>
#include<ctime>
#include<stdlib.h>

int main()
{
  int i, j;
  for(i=0; i<10; i++)
  {
    j=1+int(10.0*rand()/(RAND_MAX+1.0));

    //j=1+int(rand()*100.0/(RAND_MAX+1.0));
    printf("%d ", j);
  }
  printf("\n");

  return 0;
}



#endif





////////////////////////////////////////////////////////////////////////////////
