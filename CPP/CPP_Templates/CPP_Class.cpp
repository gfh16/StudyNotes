/*******************************************************************************
                      C++  类和对象 -- 知识要点

            一. 类的基本概念
                1. 类的定义、C++对象、访问数据成员
                2. 类的成员函数
                3. 类访问修饰符
                4. 构造函数与析构函数
                5. C++拷贝构造函数
                6. 友元函数
                7. 内联函数
                8. this指针
                9. const对象和const成员函数
                10. 指向类的指针
                11.类的静态成员

            二. 类的操作
                1.类对象的指针和引用
                2.指针作为数据成员
                3.控制对类的访问
                4.副本构造函数的重要性
                5.类的引用
                6.类的自动转换和强制类型转换

            三. 类和动态内存分配
                1.动态内存和类
                2.改进后的新String类
                3.在构造函数中使用new时应注意的事项
                4.有关返回对象的说明
                5.使用指向对象的指针
                6.队列模拟

            四. 运算重载符
                1.运算重载符
                2.可以重载的运算符
                3.实现重载运算符
                4.运算符函数术语
                5.重载赋值运算符
                6.重载算术运算符
                7.重载下标运算符
                8.重载类型转换
                9.重载递增和递减运算符
                10.智能指针
                11.重载运算符new和delete

            五. 类继承
                1.类的继承
                2.继承下的访问控制
                3.把类的成员声明为protected
                4.派生类成员的访问级别
                5.派生类中的构造函数操作
                6.继承中的析构函数
                7.多重继承

            六. 虚函数和多态性
                1.理解多态性
                2.多态性的成本
                3.纯虚函数
                4.通过指针释放对象
                5.类成员的指针

            七. 类模板
               1.什么是类模板
               2.定义类模板
               3.模板的显式实例化
               4.类模板的友元
               5.其他

******************************************************************************/
1. 类的定义、C++对象、访问数据成员
(1) 类的定义:
    class Box
    {
       public:
          double length;
          double breadth
          double height;
    };

(2) 声明类的对象: Box box1;
(3) 类的对象的公共数据成员可以使用直接成员访问运算符(.)来访问
    box1.length = 5.0;

    ***私有的成员和受保护的成员不能使用直接成员访问运算符(.)

2. 类成员函数
   (1)含义: 定义和原型写在类定义内部的函数
   (2)成员函数的定义
      <1>类内定义
         class Box
         {
            public:
                double length;
                double breadth;
                double height;

                double getVolume(void)
                {
                  return length*breadth*height;
                }
         };

      <2>使用范围解析运算符(::)
         double Box::getVolume(void)
         {
           return length*breadth*height;
         }

3. 访问修饰符
   (1) 3 个访问修饰符: public, private, protected
       <1> 每个标记区域在下一个标记区域开始之前或者遇到类主体结束右括号之前都是有效的
       <2> 成员和类的默认访问修饰符是private

   (2) 公有成员(public)
       <1> 公有成员在程序中类的外部是可以访问的

   (3) 私有成员(private)
       <1> 私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员
       <2> 实际操作中，一般在私有区域定义数据，在公有区域定义函数

   (4) 保护成员(protected)
       <1> 保护成员与私有成员十分相似，但有一点不同：保护成员在派生类中是可以访问的

4. 构造函数与析构函数
   (1)构造函数
      <1> 类的一种特殊成员函数，它会在每次创建类的新对象时执行
      <2> 构造函数的名称与类的名称完全相同，不返回任何类型，也不返回void
      <3> 构造函数可用于为某些成员变量设置初始值

    (2)析构函数
       <1> 类的一种特殊的成员函数，它会在每次删除所创建的对象时执行
       <2> 析构函数的名称与类名完全相同，只是在前面加了个波浪号(~)作为前缀，不返回任何值，也不能
           带有任何参数
       <3> 析构函数有助于在跳出程序(比如关闭文件、释放内存等)前释放资源

    (3)构造函数的应用
       <1>带参数的构造函数: 构造函数可以带参数，在创建对象时就会给对象赋初始值
       <2>例子

          class Line
          {
             public:
                void setLength(double len);
                double getLength(void);
                Line();  //这是构造函数
                Line(double len);  //带参数的构造函数
                ~Line();           //这是析构函数
          };

          Line::Line(void)   //不带参数的构造函数
          {
            cout<<"Object is being created"<<endl;
          }

          Line::Line(double len)
          {
            cout<<"Object is being created, length="<<len<<endl;
            length = len;
          }

          Line::~Line(void)
          {
            cout<<"Object is being deleted"<<endl;
          }

    (4)析构函数的应用


5. 拷贝构造函数
   (1) 一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象

   (2) 拷贝构造函数的用途：
       <1> 通过使用另一个同类型的对象来初始化新创建的对象
       <2> 复制对象把它作为参数传递给函数
       <3> 复制对象，并从函数返回这个对象

   (3) 拷贝构造函数的定义
       <1> 若在类中没有定义宝贝构造函数，编译器会自行定义一个；
           若类带有指针变量，并有动态内存分配，则必须有一个拷贝构造函数
       <2> 格式：
           classname (const classname &obj)   // obj 是一个引用对象
           {
             // 构造函数主体
           }

   (4) 什么情况使用拷贝构造函数
       <1> 一个对象以值传递的方式传入函数体
       <2> 一个对象以值传递的方式从函数返回
       <3> 一个对象需要通过另一个对象进行初始化


6. 友元函数
   <1> 类的友元函数定义在类外部，但有权访问类的所有私有成员和保护成员
   <2> 尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数
   <3> 友元也可以是一个类，该类被称为友元类, 这种情况下，这个类及其所有成员都是友元

   <4> 友元的声明
       class Box
       {
          double width;

       public:
          double length;
          friend void printWidth(Box box);  // 定义友元函数
          friend class ClassTwo;            // 定义友元类
          void setWidth(double wid);
       }


7. 内联函数
   (1) 如果一个函数是内联的，意味着，在编译时编译器会把该函数的代码副本放置在每个调用该函数的地方
   (2) 对内联函数进行任何修改，都需要重新编译函数的所有客户端
   (3) 如何定义一个内联函数？在函数名前面放置关键字inline
   (4) 在类定义中定义的的函数都是内联函数，即使没有使用inline说明符
   (4) 内联函数的使用
       <1> 为什么使用内联函数？ 为了解决程序中函数调用的效率问题
       <2> 内联函数一般都是1-5行的小函数
       <3> 使用内联函数需要注意：
          《1》内联函数内不允许使用循环语句和开关语句
          《2》n内联函数的定义必须出现在内联函数第一次调用之前


8. this指针

9. const对象与const成员函数

10. 指向类的指针

11. 类的静态成员
